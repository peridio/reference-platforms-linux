# Revert firmware on the i.MX6ULLEVK
#
# To use:
#   1. Run `fwup -c -f fwup-revert.conf -o revert.fw` and copy revert.fw to
#      the device. This is done automatically as part of the Nerves system
#      build process. The file is stored in `/usr/share/fwup/revert.fw`.
#   2. On the device, run `fwup -t revert revert.fw -d $NERVES_FW_DEVPATH`. If
#      it succeeds, reboot. If not, then it's possible that there isn't a previous
#      firmware or the metadata about what's stored where is corrupt or out of
#      sync.
#
# It is critical that this is kept in sync with the main fwup.conf.

define(PERIDIO_META, "${BINARIES_DIR}/fwup_include/meta.conf")
include("${PERIDIO_META}")

task revert.a {
    # This task reverts to the A partition, so check that we're running on B
    require-partition-offset(0, ${BOOT_B_PART_OFFSET})
    require-partition-offset(1, ${ROOTFS_B_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "b")

    # Verify that partition A has the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
        info("Reverting to partition A")

	# Switch over
        uboot_setenv(uboot-env, "peridio_active", "a")
        mbr_write(mbr-a)
    }
}

task revert.b {
    # This task reverts to the B partition, so check that we're running on A
    require-partition-offset(0, ${BOOT_A_PART_OFFSET})
    require-partition-offset(1, ${ROOTFS_A_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "a")

    # Verify that partition B has the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
        info("Reverting to partition B")

	# Switch over
        uboot_setenv(uboot-env, "peridio_active", "b")
        mbr_write(mbr-b)
    }
}

task revert.unexpected.a {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")
    on-init {
        # Case where A is good, and the desire is to go to B.
        error("It doesn't look like there's anything to revert to in partition B.")
    }
}
task revert.unexpected.b {
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")
    on-init {
        # Case where B is good, and the desire is to go to A.
        error("It doesn't look like there's anything to revert to in partition A.")
    }
}

task revert.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FWUP_META_PLATFORM} and architecture=${PERIDIO_FWUP_META_ARCHITECTURE}")
    }
}

# Run "fwup /usr/share/fwup/revert.fw -t status -d /dev/mmcblk0 -q -U" to check the status.
task status.aa {
    require-path-at-offset("/", ${ROOTFS_A_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "a")
    on-init { info("a") }
}
task status.ab {
    require-path-at-offset("/", ${ROOTFS_A_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "b")
    on-init { info("a->b") }
}
task status.bb {
    require-path-at-offset("/", ${ROOTFS_B_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "b")
    on-init { info("b") }
}
task status.ba {
    require-path-at-offset("/", ${ROOTFS_B_PART_OFFSET})
    require-uboot-variable(uboot-env, "peridio_active", "a")
    on-init { info("b->a") }
}
task status.fail {
    on-init { error("fail") }
}
