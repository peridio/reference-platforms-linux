# Firmware configuration file for the i.MX6ULL EVK
define(PERIDIO_META, "${BINARIES_DIR}/fwup_include/meta.conf")
define(PERIDIO_AVOCADO_FILE_RESOURCES, "${BINARIES_DIR}/fwup_include/platform-file-resources.conf")

include("${PERIDIO_META}")

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
include("${PERIDIO_AVOCADO_FILE_RESOURCES}")
file-resource u-boot-dtb.imx {
    host-path = "${BINARIES_DIR}/u-boot-dtb.imx"
}
file-resource uTee-6ullevk {
    host-path = "${BINARIES_DIR}/uTee-6ullevk"
}
file-resource uboot-env.bin {
    host-path = "${BINARIES_DIR}/uboot-env.bin"
}
file-resource boot.scr {
    host-path = "${BINARIES_DIR}/boot.scr"
}
file-resource peridio-initramfs {
    host-path = "${BINARIES_DIR}/peridio-initramfs-arm.xz;${BINARIES_DIR}/fw_env.config.cpio"
}
file-resource zImage {
    host-path = "${BINARIES_DIR}/zImage"
}
file-resource imx6ull-14x14-evk.dtb {
    host-path = "${BINARIES_DIR}/imx6ull-14x14-evk.dtb"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-a)

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")

        uboot_clearenv(uboot-env)

        include("${PERIDIO_AVOCADO_PROVISIONING}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "peridio_initramfs_shell", "false")
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource u-boot-dtb.imx { raw_write(${UBOOT_OFFSET}) }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource boot.scr { fat_write(${BOOT_A_PART_OFFSET}, "boot.scr") }
    on-resource peridio-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "peridio-initramfs") }
    on-resource uTee-6ullevk { fat_write(${BOOT_A_PART_OFFSET}, "uTee-6ullevk") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_A_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    include("${PERIDIO_AVOCADO_COMPLETE}")

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${BOOT_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${PLATFORM_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition-offset(1, ${ROOTFS_B_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    # Write the new firmware and Linux images, but don't
    # commit them. That way if the user aborts midway, we
    # still are using the original firmware.
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource boot.scr { fat_write(${BOOT_A_PART_OFFSET}, "boot.scr") }
    on-resource uTee-6ullevk { fat_write(${BOOT_A_PART_OFFSET}, "uTee-6ullevk") }
    on-resource peridio-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "peridio-initramfs") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_A_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "a")
        mbr_write(mbr-a)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition-offset(1, ${ROOTFS_A_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.peridio_version")
        uboot_unsetenv(uboot-env, "b.peridio_platform")
        uboot_unsetenv(uboot-env, "b.peridio_architecture")
        uboot_unsetenv(uboot-env, "b.peridio_uuid")

        # Reset the previous contents of the B boot partition
        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")

        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    on-resource zImage { fat_write(${BOOT_B_PART_OFFSET}, "zImage") }
    on-resource boot.scr { fat_write(${BOOT_B_PART_OFFSET}, "boot.scr") }
    on-resource uTee-6ullevk { fat_write(${BOOT_B_PART_OFFSET}, "uTee-6ullevk") }
    on-resource peridio-initramfs { fat_write(${BOOT_B_PART_OFFSET}, "peridio-initramfs") }
    on-resource imx6ull-14x14-evk.dtb { fat_write(${BOOT_B_PART_OFFSET}, "imx6ull-14x14-evk.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_FWUP_META_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_FWUP_META_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_FWUP_META_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_FWUP_META_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_FWUP_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_FWUP_META_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_FWUP_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_FWUP_META_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "b")
        mbr_write(mbr-b)
    }

    on-error {
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FWUP_META_PLATFORM} and architecture=${PERIDIO_FWUP_META_ARCHITECTURE}")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FWUP_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FWUP_META_ARCHITECTURE}")
    on-init {
        include("${PERIDIO_AVOCADO_PROVISIONING}")
    }
}
task provision.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FWUP_META_PLATFORM} and architecture=${PERIDIO_FWUP_META_ARCHITECTURE}")
    }
}
