# Firmware configuration file for the Raspberry Pi 4
define(PERIDIO_META, "${BINARIES_DIR}/fwup_include/meta.conf")
define(PERIDIO_PLATFORM_FILE_RESOURCES, "${BINARIES_DIR}/fwup_include/platform-file-resources.conf")

include("${PERIDIO_META}")

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
include("${PERIDIO_PLATFORM_FILE_RESOURCES}")
file-resource fixup.dat {
    host-path = "${BINARIES_DIR}/rpi-firmware/fixup4x.dat"
}
file-resource start.elf {
    host-path = "${BINARIES_DIR}/rpi-firmware/start4x.elf"
}
file-resource config.txt {
    host-path = "${BINARIES_DIR}/config.txt"
}
file-resource cmdline.txt {
    host-path = "${BINARIES_DIR}/cmdline.txt"
}
file-resource kernel8.img {
    host-path = "${BINARIES_DIR}/Image"
}
file-resource peridio-initramfs {
    host-path = "${BINARIES_DIR}/peridio-initramfs-aarch64.xz;${BINARIES_DIR}/fw_env.config.cpio"
}
file-resource bcm2711-rpi-cm4.dtb {
    host-path = "${BINARIES_DIR}/bcm2711-rpi-cm4.dtb"
}
file-resource rpi-ft5406.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/rpi-ft5406.dtbo"
}
file-resource rpi-backlight.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/rpi-backlight.dtbo"
}
file-resource w1-gpio-pullup.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/w1-gpio-pullup.dtbo"
}
file-resource miniuart-bt.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/miniuart-bt.dtbo"
}
file-resource vc4-fkms-v3d.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/vc4-fkms-v3d.dtbo"
}
file-resource dwc2.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/dwc2.dtbo"
}
file-resource ramoops.dtbo {
    host-path = "${BINARIES_DIR}/ramoops.dtb"
}

file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}


# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-a)

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "overlays")

        uboot_clearenv(uboot-env)

        include("${PERIDIO_PROVISIONING}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_FW_DEVPATH})
        uboot_setenv(uboot-env, "peridio_initramfs_shell", "false")
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource config.txt { fat_write(${BOOT_A_PART_OFFSET}, "config.txt") }
    on-resource cmdline.txt { fat_write(${BOOT_A_PART_OFFSET}, "cmdline.txt") }
    on-resource start.elf { fat_write(${BOOT_A_PART_OFFSET}, "start.elf") }
    on-resource fixup.dat { fat_write(${BOOT_A_PART_OFFSET}, "fixup.dat") }
    on-resource kernel8.img { fat_write(${BOOT_A_PART_OFFSET}, "kernel8.img") }
    on-resource peridio-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "peridio-initramfs") }
    on-resource bcm2711-rpi-cm4.dtb { fat_write(${BOOT_A_PART_OFFSET}, "bcm2711-rpi-cm4.dtb") }
    on-resource rpi-ft5406.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/rpi-ft5406.dtbo") }
    on-resource rpi-backlight.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/rpi-backlight.dtbo") }
    on-resource w1-gpio-pullup.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/w1-gpio-pullup.dtbo") }
    on-resource miniuart-bt.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/miniuart-bt.dtbo") }
    on-resource vc4-fkms-v3d.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/vc4-fkms-v3d.dtbo") }
    on-resource dwc2.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/dwc2.dtbo") }
    on-resource ramoops.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/ramoops.dtbo") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    include("${PERIDIO_PLATFORM_COMPLETE}")

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${BOOT_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${PLATFORM_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition-offset(1, ${ROOTFS_B_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "overlays")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the B partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource config.txt { fat_write(${BOOT_A_PART_OFFSET}, "config.txt") }
    on-resource cmdline.txt { fat_write(${BOOT_A_PART_OFFSET}, "cmdline.txt") }
    on-resource start.elf { fat_write(${BOOT_A_PART_OFFSET}, "start.elf") }
    on-resource fixup.dat { fat_write(${BOOT_A_PART_OFFSET}, "fixup.dat") }
    on-resource kernel8.img { fat_write(${BOOT_A_PART_OFFSET}, "kernel8.img") }
    on-resource peridio-initramfs { fat_write(${BOOT_A_PART_OFFSET}, "peridio-initramfs") }
    on-resource bcm2711-rpi-cm4.dtb { fat_write(${BOOT_A_PART_OFFSET}, "bcm2711-rpi-cm4.dtb") }
    on-resource rpi-ft5406.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/rpi-ft5406.dtbo") }
    on-resource rpi-backlight.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/rpi-backlight.dtbo") }
    on-resource w1-gpio-pullup.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/w1-gpio-pullup.dtbo") }
    on-resource miniuart-bt.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/miniuart-bt.dtbo") }
    on-resource vc4-fkms-v3d.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/vc4-fkms-v3d.dtbo") }
    on-resource dwc2.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/dwc2.dtbo") }
    on-resource ramoops.dtbo { fat_write(${BOOT_A_PART_OFFSET}, "overlays/ramoops.dtbo") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

  include("${PERIDIO_PLATFORM_UPGRADE_A}")

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

	# Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "a")
        mbr_write(mbr-a)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition-offset(1, ${ROOTFS_A_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.peridio_version")
        uboot_unsetenv(uboot-env, "b.peridio_platform")
        uboot_unsetenv(uboot-env, "b.peridio_architecture")
        uboot_unsetenv(uboot-env, "b.peridio_uuid")

        # Reset the previous contents of the B boot partition
        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")
        fat_mkdir(${BOOT_B_PART_OFFSET}, "overlays")

        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the A partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource config.txt { fat_write(${BOOT_B_PART_OFFSET}, "config.txt") }
    on-resource cmdline.txt { fat_write(${BOOT_B_PART_OFFSET}, "cmdline.txt") }
    on-resource start.elf { fat_write(${BOOT_B_PART_OFFSET}, "start.elf") }
    on-resource fixup.dat { fat_write(${BOOT_B_PART_OFFSET}, "fixup.dat") }
    on-resource kernel8.img { fat_write(${BOOT_B_PART_OFFSET}, "kernel8.img") }
    on-resource peridio-initramfs { fat_write(${BOOT_B_PART_OFFSET}, "peridio-initramfs") }
    on-resource bcm2711-rpi-cm4.dtb { fat_write(${BOOT_B_PART_OFFSET}, "bcm2711-rpi-cm4.dtb") }
    on-resource rpi-ft5406.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/rpi-ft5406.dtbo") }
    on-resource rpi-backlight.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/rpi-backlight.dtbo") }
    on-resource w1-gpio-pullup.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/w1-gpio-pullup.dtbo") }
    on-resource miniuart-bt.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/miniuart-bt.dtbo") }
    on-resource vc4-fkms-v3d.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/vc4-fkms-v3d.dtbo") }
    on-resource dwc2.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/dwc2.dtbo") }
    on-resource ramoops.dtbo { fat_write(${BOOT_B_PART_OFFSET}, "overlays/ramoops.dtbo") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    include("${PERIDIO_PLATFORM_UPGRADE_B}")

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

	# Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_active", "b")
        mbr_write(mbr-b)
    }

    on-error {
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FW_PLATFORM} and architecture=${PERIDIO_FW_ARCHITECTURE}")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")
    on-init {
        include("${PERIDIO_PROVISIONING}")
    }
}
task provision.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FW_PLATFORM} and architecture=${PERIDIO_FW_ARCHITECTURE}")
    }
}
