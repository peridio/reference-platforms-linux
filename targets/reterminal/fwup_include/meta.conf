require-fwup-version="0.15.0"  # For the trim() call

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
define(PERIDIO_FW_PRODUCT, "${PERIDIO_PLATFORM_META_PRODUCT}")
define(PERIDIO_FW_DESCRIPTION, "${PERIDIO_PLATFORM_META_DESCRIPTION}")
define(PERIDIO_FW_VERSION, "${PERIDIO_PLATFORM_META_VERSION}")
define(PERIDIO_FW_PLATFORM, "reterminal")
define(PERIDIO_FW_ARCHITECTURE, "arm")
define(PERIDIO_FW_AUTHOR, "${PERIDIO_PLATFORM_META_AUTHOR}")

define(PERIDIO_FW_DEVPATH, "/dev/mmcblk0")
define(PERIDIO_ROOTFS_PART0_DEVPATH, "/dev/mmcblk0p2")
define(PERIDIO_ROOTFS_PART0_TYPE, "squashfs")
define(PERIDIO_DATAFS_PART0_DEVPATH, "/dev/mmcblk0p4") # Linux part number is 1-based
define(PERIDIO_DATAFS_PART0_TYPE, "f2fs")
define(PERIDIO_DATAFS_PART0_TARGET, "/data")
define(PERIDIO_PROVISIONING, "${BINARIES_DIR}/fwup_include/provisioning.conf")
define(PERIDIO_PLATFORM_SIZE, "${BINARIES_DIR}/fwup_include/platform-size-1Gb.conf")
define(PERIDIO_PLATFORM_COMPLETE, "${BINARIES_DIR}/fwup_include/platform-complete.conf")
define(PERIDIO_PLATFORM_UPGRADE_A, "${BINARIES_DIR}/fwup_include/platform-upgrade-a.conf")
define(PERIDIO_PLATFORM_UPGRADE_B, "${BINARIES_DIR}/fwup_include/platform-upgrade-b.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${BINARIES_DIR}/rootfs.squashfs")

# This configuration file will create an image that has an MBR and the
# following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | p0*: Boot A (FAT32)        |
# | kernel8.img, start.elf,    |
# | config.txt, etc.           |
# +----------------------------+
# | p0*: Boot B (FAT32)        |
# +----------------------------+
# | p1*: Rootfs A (squashfs)   |
# +----------------------------+
# | p1*: Rootfs B (squashfs)   |
# +----------------------------+
# | p2*: Platform A (squashfs) |
# +----------------------------+
# | p2*: Platform B (squashfs) |
# +----------------------------+
# | p3: Application (f2fs)     |
# +----------------------------+
#
# The p0/p1 partition points to whichever of configurations A or B that is
# active.
#

# The Raspberry Pi is incredibly picky on the partition sizes and in ways that
# I don't understand. Test changes one at a time to make sure that they boot.
# (Sizes are in 512 byte blocks)
define(UBOOT_ENV_OFFSET, 16)
define(UBOOT_ENV_COUNT, 16)  # 8 KB

define(BOOT_A_PART_OFFSET, 63)
define(BOOT_A_PART_COUNT, 77260)
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# Let the rootfs have room to grow up to 128 MiB and align it to the nearest 1
# MB boundary
define(ROOTFS_A_PART_OFFSET, 196608)
define(ROOTFS_A_PART_COUNT, 289044)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

include("${PERIDIO_PLATFORM_SIZE}")

# Application partition. This partition can occupy all of the remaining space.
# Size it to fit the destination.
define-eval(DATA_PART_OFFSET, "${PLATFORM_B_PART_OFFSET} + ${PLATFORM_B_PART_COUNT}")
define(DATA_PART_COUNT, 1048576)

# Firmware archive metadata
meta-product = ${PERIDIO_FW_PRODUCT}
meta-description = ${PERIDIO_FW_DESCRIPTION}
meta-version = ${PERIDIO_FW_VERSION}
meta-platform = ${PERIDIO_FW_PLATFORM}
meta-architecture = ${PERIDIO_FW_ARCHITECTURE}
meta-author = ${PERIDIO_FW_AUTHOR}
meta-vcs-identifier = ${PERIDIO_FW_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_FW_MISC}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${PLATFORM_A_PART_OFFSET}
        block-count = ${PLATFORM_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${PLATFORM_B_PART_OFFSET}
        block-count = ${PLATFORM_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}
