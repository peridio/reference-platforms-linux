# Firmware configuration file for x86_64 systems
define(PERIDIO_META, "${BINARIES_DIR}/fwup_include/meta.conf")
define(PERIDIO_PLATFORM_FILE_RESOURCES, "${BINARIES_DIR}/fwup_include/platform-file-resources.conf")

include("${PERIDIO_META}")
include("${PERIDIO_PLATFORM_FILE_RESOURCES}")
file-resource bzImage {
    host-path = "${BINARIES_DIR}/bzImage"
}
file-resource bootx64.efi {
    host-path = "${BINARIES_DIR}/efi-part/EFI/BOOT/bootx64.efi"
}
file-resource grub.cfg {
    host-path = "${BINARIES_DIR}/grub.cfg"
}
file-resource peridio-initramfs {
    host-path = "${BINARIES_DIR}/peridio-initramfs-x86_64.xz;${BINARIES_DIR}/fw_env.config.cpio"
}

file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run for the first installation.
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        gpt_write(gpt-a)

        uboot_clearenv(uboot-env)

        include("${PERIDIO_PROVISIONING}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_FW_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        fat_mkfs(${EFI_A_PART_OFFSET}, ${EFI_A_PART_COUNT})
        fat_setlabel(${EFI_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${EFI_A_PART_OFFSET}, "/EFI")
        fat_mkdir(${EFI_A_PART_OFFSET}, "/EFI/BOOT")
    }

    on-resource bzImage { fat_write(${EFI_A_PART_OFFSET}, "/bzImage") }
    on-resource peridio-initramfs { fat_write(${EFI_A_PART_OFFSET}, "/peridio-initramfs") }
    on-resource bootx64.efi { fat_write(${EFI_A_PART_OFFSET}, "/EFI/BOOT/bootx64.efi") }
    on-resource grub.cfg { fat_write(${EFI_A_PART_OFFSET}, "/EFI/BOOT/grub.cfg") }

    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    include("${PERIDIO_PLATFORM_COMPLETE}")

    on-finish {
      # Clear out any old data in the B partition that might be mistaken for
      # a file system. This is mostly to avoid confusion in humans when
      # reprogramming SDCards with unknown contents.
      raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

      # Invalidate the application data partition so that it is guaranteed to
      # trigger the corrupt filesystem detection code on first boot and get
      # formatted.
      raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition, so make sure we're running
    # on B.
    require-uboot-variable(uboot-env, "peridio_active", "b")

    # Require that the running version of firmware has been validated.
    # If it has not, then failing back is not guaranteed to work.
    require-uboot-variable(uboot-env, "peridio_validated", "1")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        # Indicate that the entire partition can be cleared
        trim(${EFI_A_PART_OFFSET}, ${EFI_A_PART_COUNT})
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})

        # Reset the previous contents of the A boot partition
        fat_mkfs(${EFI_A_PART_OFFSET}, ${EFI_A_PART_COUNT})
        fat_setlabel(${EFI_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${EFI_A_PART_OFFSET}, "/EFI")
        fat_mkdir(${EFI_A_PART_OFFSET}, "/EFI/BOOT")
    }

    on-resource bzImage { fat_write(${EFI_A_PART_OFFSET}, "/bzImage") }
    on-resource peridio-initramfs { fat_write(${EFI_A_PART_OFFSET}, "/peridio-initramfs") }
    on-resource bootx64.efi { fat_write(${EFI_A_PART_OFFSET}, "/EFI/BOOT/bootx64.efi") }
    on-resource grub.cfg { fat_write(${EFI_A_PART_OFFSET}, "/EFI/BOOT/grub.cfg") }

    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    include("${PERIDIO_PLATFORM_UPGRADE_A}")

    on-finish {
      # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to A
        # next time.
        uboot_setenv(uboot-env, "peridio_active", "a")
        gpt_write(gpt-a)
    }
}

task upgrade.b {
    # This task upgrades the B partition, so make sure we're running
    # on A.
    require-uboot-variable(uboot-env, "peridio_active", "a")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")

    on-init {
      info("Upgrading partition B")

      # Clear some firmware information just in case this update gets
      # interrupted midway.
      uboot_unsetenv(uboot-env, "b.peridio_version")
      uboot_unsetenv(uboot-env, "b.peridio_platform")
      uboot_unsetenv(uboot-env, "b.peridio_architecture")
      uboot_unsetenv(uboot-env, "b.peridio_uuid")

      trim(${EFI_B_PART_OFFSET}, ${EFI_B_PART_COUNT})
      trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})

      fat_mkfs(${EFI_B_PART_OFFSET}, ${EFI_B_PART_COUNT})
      fat_mkdir(${EFI_B_PART_OFFSET}, "/EFI")
      fat_mkdir(${EFI_B_PART_OFFSET}, "/EFI/BOOT")
    }

    on-resource bzImage { fat_write(${EFI_B_PART_OFFSET}, "/bzImage") }
    on-resource peridio-initramfs { fat_write(${EFI_B_PART_OFFSET}, "/peridio-initramfs") }
    on-resource bootx64.efi { fat_write(${EFI_B_PART_OFFSET}, "/EFI/BOOT/bootx64.efi") }
    on-resource grub.cfg { fat_write(${EFI_B_PART_OFFSET}, "/EFI/BOOT/grub.cfg") }

    on-resource rootfs.img { raw_write(${ROOTFS_B_PART_OFFSET}) }

    include("${PERIDIO_PLATFORM_UPGRADE_B}")

    on-finish {
      # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_devpath", ${PERIDIO_ROOTFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part0_type", ${PERIDIO_ROOTFS_PART0_TYPE})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_devpath", ${PERIDIO_PLATFORMFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_platformfs_part0_type", ${PERIDIO_PLATFORMFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_devpath", ${PERIDIO_DATAFS_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_type", ${PERIDIO_DATAFS_PART0_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part0_target", ${PERIDIO_DATAFS_PART0_TARGET})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_FW_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_FW_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_FW_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_FW_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_FW_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to B next time.
        uboot_setenv(uboot-env, "peridio_active", "b")
        gpt_write(gpt-b)
    }
}

task upgrade.wrong {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_FW_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_FW_PLATFORM} and architecture=${PERIDIO_FW_ARCHITECTURE}")
    }
}
