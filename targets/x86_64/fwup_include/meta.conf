#
# Firmware metadata
#

require-fwup-version="1.4.0"  # For the GPT support

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
define(PERIDIO_FW_PRODUCT, "${PERIDIO_PLATFORM_META_PRODUCT}")
define(PERIDIO_FW_DESCRIPTION, "${PERIDIO_PLATFORM_META_DESCRIPTION}")
define(PERIDIO_FW_VERSION, "${PERIDIO_PLATFORM_META_VERSION}")
define(PERIDIO_FW_PLATFORM, "generic")
define(PERIDIO_FW_ARCHITECTURE, "x86_64")
define(PERIDIO_FW_AUTHOR, "${PERIDIO_PLATFORM_META_AUTHOR}")

define(PERIDIO_DISK_UUID, "${PERIDIO_PLATFORM_DISK_UUID}")
define(PERIDIO_BOOT_PART_UUID, "${PERIDIO_PLATFORM_BOOT_PART_UUID}")
define(PERIDIO_ROOTFS_PART_UUID, "${PERIDIO_PLATFORM_ROOTFS_PART_UUID}")
define(PERIDIO_PLATFORMFS_PART_UUID, "${PERIDIO_PLATFORM_PLATFORMFS_PART_UUID}")
define(PERIDIO_DATA_PART_UUID, "${PERIDIO_PLATFORM_DATA_PART_UUID}")

define(PERIDIO_FW_DEVPATH, "UUID=${PERIDIO_DISK_UUID}")
define(PERIDIO_DATAFS_PART0_DEVPATH, "PARTUUID=${PERIDIO_DATA_PART_UUID}") # Linux part number is 1-based
define(PERIDIO_DATAFS_PART0_TYPE, "f2fs")
define(PERIDIO_DATAFS_PART0_TARGET, "/data")
define(PERIDIO_PROVISIONING, "${BINARIES_DIR}/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${BINARIES_DIR}/rootfs.squashfs")

# This configuration file will create an image that has the following
# partitions:
#
# +-------------------------------+
# | GPT                           |
# +-------------------------------+
# | Firmware configuration data   |
# | (formatted as uboot env)      |
# +-------------------------------+
# | p0*: Kernel/EFI A (Readonly FAT32) |
# | /bzImage                      |
# | /peridio-initramfs            |
# | /EFI/BOOT/bootx86.efi         |
# | /EFI/BOOT/grub.cfg            |
# +-------------------------------+
# | p0*: Kernel/EFI B (Readonly FAT32) |
# +-------------------------------+
# | p1*: Rootfs A (squashfs)      |
# +-------------------------------+
# | p1*: Rootfs B (squashfs)      |
# +-------------------------------+
# | p2*: Platform A (squashfs)    |
# +-------------------------------+
# | p2*: Platform B (squashfs)    |
# +-------------------------------+
# | p3: Application (f2fs)        |
# +-------------------------------+

define(EFI_TYPE, "c12a7328-f81f-11d2-ba4b-00a0c93ec93b")
define(LINUX_ROOT_X86_64_TYPE, "4f68bce3-e8cd-4db1-96e7-fbcaf984b709")
define(LINUX_FILESYSTEM_DATA_TYPE, "0fc63daf-8483-4772-8e79-3d69d8477de4")

define(PERIDIO_ROOTFS_PART0_DEVPATH, "PARTUUID=${PERIDIO_ROOTFS_PART_UUID}")
define(PERIDIO_ROOTFS_PART0_TYPE, "squashfs")
define(PERIDIO_DATAFS_PART0_DEVPATH, "PARTUUID=${PERIDIO_DATA_PART_UUID}") # Linux part number is 1-based
define(PERIDIO_DATAFS_PART0_TYPE, "f2fs")
define(PERIDIO_DATAFS_PART0_TARGET, "/data")
define(PERIDIO_PLATFORM_SIZE, "${BINARIES_DIR}/fwup_include/platform-size-1Gb.conf")
define(PERIDIO_PLATFORM_COMPLETE, "${BINARIES_DIR}/fwup_include/platform-complete.conf")
define(PERIDIO_PLATFORM_UPGRADE_A, "${BINARIES_DIR}/fwup_include/platform-upgrade-a.conf")
define(PERIDIO_PLATFORM_UPGRADE_B, "${BINARIES_DIR}/fwup_include/platform-upgrade-b.conf")

define(UBOOT_ENV_OFFSET, 2048)
define(UBOOT_ENV_COUNT, 256)  # 128 KB

# The EFI partition contains the bootloader configuration
# 16 MB should be plenty for now.
define(EFI_A_PART_OFFSET, 4096)
define(EFI_A_PART_COUNT, 32768)
define-eval(EFI_B_PART_OFFSET, "${EFI_A_PART_OFFSET} + ${EFI_A_PART_COUNT}")
define(EFI_B_PART_COUNT, ${EFI_A_PART_COUNT})

# Let the rootfs have room to grow up to 512 MiB
define-eval(ROOTFS_A_PART_OFFSET, "${EFI_B_PART_OFFSET} + ${EFI_B_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 1048576)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

include("${PERIDIO_PLATFORM_SIZE}")

# Application data partition (4 GiB). This can be enlarged
# to fill the entire volume.
define-eval(DATA_PART_OFFSET, "${PLATFORM_B_PART_OFFSET} + ${PLATFORM_B_PART_COUNT}")
define(DATA_PART_COUNT, 8388608)

# Firmware archive metadata
meta-product = ${PERIDIO_FW_PRODUCT}
meta-description = ${PERIDIO_FW_DESCRIPTION}
meta-version = ${PERIDIO_FW_VERSION}
meta-platform = ${PERIDIO_FW_PLATFORM}
meta-architecture = ${PERIDIO_FW_ARCHITECTURE}
meta-author = ${PERIDIO_FW_AUTHOR}
meta-vcs-identifier = ${PERIDIO_FW_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_FW_MISC}

gpt gpt-a {
    guid = ${PERIDIO_DISK_UUID}

    partition 0 {
        block-offset = ${EFI_A_PART_OFFSET}
        block-count = ${EFI_A_PART_COUNT}
        type = ${EFI_TYPE}
        guid = ${PERIDIO_BOOT_PART_UUID}
        name = "EFI Partition"
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = ${LINUX_ROOT_X86_64_TYPE}
        guid = ${PERIDIO_ROOTFS_PART_UUID}
        name = "RootFS A Partition"
    }
    partition 2 {
        block-offset = ${PLATFORM_A_PART_OFFSET}
        block-count = ${PLATFORM_A_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${PERIDIO_PLATFORMFS_PART_UUID}
        name = "PlatformFS A Partition"
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${PERIDIO_DATA_PART_UUID}
        name = "Application Data Partition"
        expand = true
    }
}

gpt gpt-b {
    guid = ${PERIDIO_DISK_UUID}

    partition 0 {
        block-offset = ${EFI_B_PART_OFFSET}
        block-count = ${EFI_B_PART_COUNT}
        type = ${EFI_TYPE}
        guid = ${PERIDIO_BOOT_PART_UUID}
        name = "EFI Partition"
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = ${LINUX_ROOT_X86_64_TYPE}
        guid = ${PERIDIO_ROOTFS_PART_UUID}
        name = "RootFS B Partition"
    }
    partition 2 {
        block-offset = ${PLATFORM_B_PART_OFFSET}
        block-count = ${PLATFORM_B_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${PERIDIO_PLATFORMFS_PART_UUID}
        name = "PlatformFS B Partition"
    }
    partition 3 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = ${LINUX_FILESYSTEM_DATA_TYPE}
        guid = ${PERIDIO_DATA_PART_UUID}
        name = "Application Data Partition"
        expand = true
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}
